diff --git a/.golangci.next.reference.yml b/.golangci.next.reference.yml
index 62b7fd65..fe85c519 100644
--- a/.golangci.next.reference.yml
+++ b/.golangci.next.reference.yml
@@ -1207,6 +1207,15 @@ linters-settings:
     # Default: false
     var-require-grouping: true
 
+  iface:
+    # By default set to empty. Leave it empty means all analyzers are enabled.
+    # Default: []
+    enable:
+      - unused
+      - empty
+      - duplicate
+      - opaque
+
   importas:
     # Do not allow unaliased imports of aliased packages.
     # Default: false
diff --git a/go.mod b/go.mod
index cea54248..7340bb23 100644
--- a/go.mod
+++ b/go.mod
@@ -1,6 +1,6 @@
 module github.com/golangci/golangci-lint
 
-go 1.21.0
+go 1.22.5
 
 require (
 	4d63.com/gocheckcompilerdirectives v1.2.1
@@ -115,6 +115,7 @@ require (
 	github.com/ultraware/funlen v0.1.0
 	github.com/ultraware/whitespace v0.1.1
 	github.com/uudashr/gocognit v1.1.2
+	github.com/uudashr/iface v1.0.0
 	github.com/valyala/quicktemplate v1.8.0
 	github.com/xen0n/gosmopolitan v1.2.2
 	github.com/yagipy/maintidx v1.0.0
diff --git a/go.sum b/go.sum
index cd184b5c..d9a4d9e6 100644
--- a/go.sum
+++ b/go.sum
@@ -557,6 +557,8 @@ github.com/ultraware/whitespace v0.1.1 h1:bTPOGejYFulW3PkcrqkeQwOd6NKOOXvmGD9bo/
 github.com/ultraware/whitespace v0.1.1/go.mod h1:XcP1RLD81eV4BW8UhQlpaR+SDc2givTvyI8a586WjW8=
 github.com/uudashr/gocognit v1.1.2 h1:l6BAEKJqQH2UpKAPKdMfZf5kE4W/2xk8pfU1OVLvniI=
 github.com/uudashr/gocognit v1.1.2/go.mod h1:aAVdLURqcanke8h3vg35BC++eseDm66Z7KmchI5et4k=
+github.com/uudashr/iface v1.0.0 h1:NoiiU7xzO9C/4xSMHH7Me7V2qZtRslVHKCIXYvA6VR8=
+github.com/uudashr/iface v1.0.0/go.mod h1:uapH12iu4iwziF3F0exELbQSgJuf3WIwKrNwphQ2xIc=
 github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
 github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
 github.com/valyala/quicktemplate v1.8.0 h1:zU0tjbIqTRgKQzFY1L42zq0qR3eh4WoQQdIdqCysW5k=
diff --git a/jsonschema/golangci.next.jsonschema.json b/jsonschema/golangci.next.jsonschema.json
index 0999c278..7d67c1bd 100644
--- a/jsonschema/golangci.next.jsonschema.json
+++ b/jsonschema/golangci.next.jsonschema.json
@@ -287,6 +287,14 @@
         "waitgroup-by-value"
       ]
     },
+    "iface-analyzers": {
+      "enum": [
+        "empty",
+        "unused",
+        "duplicate",
+        "opaque"
+      ]
+    },
     "linters": {
       "$comment": "anyOf with enum is used to allow auto completion of non-custom linters",
       "description": "Linters usable.",
@@ -1897,6 +1905,19 @@
             }
           }
         },
+        "iface": {
+          "type": "object",
+          "additionalProperties": false,
+          "properties": {
+            "enable": {
+              "description": "Enable analyzers by name.",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/iface-analyzers"
+              }
+            }
+          }
+        },
         "importas": {
           "type": "object",
           "additionalProperties": false,
diff --git a/pkg/config/linters_settings.go b/pkg/config/linters_settings.go
index f159db2a..1a82ad8d 100644
--- a/pkg/config/linters_settings.go
+++ b/pkg/config/linters_settings.go
@@ -233,6 +233,7 @@ type LintersSettings struct {
 	Gosmopolitan    GosmopolitanSettings
 	Govet           GovetSettings
 	Grouper         GrouperSettings
+	Iface           IfaceSettings
 	ImportAs        ImportAsSettings
 	Inamedparam     INamedParamSettings
 	InterfaceBloat  InterfaceBloatSettings
@@ -647,6 +648,10 @@ type GrouperSettings struct {
 	VarRequireGrouping        bool `mapstructure:"var-require-grouping"`
 }
 
+type IfaceSettings struct {
+	Enable []string `mapstructure:"enable"`
+}
+
 type ImportAsSettings struct {
 	Alias          []ImportAsAlias
 	NoUnaliased    bool `mapstructure:"no-unaliased"`
diff --git a/pkg/golinters/iface/iface.go b/pkg/golinters/iface/iface.go
new file mode 100644
index 00000000..e0388a4d
--- /dev/null
+++ b/pkg/golinters/iface/iface.go
@@ -0,0 +1,75 @@
+package iface
+
+import (
+	"slices"
+
+	"github.com/golangci/golangci-lint/pkg/config"
+	"github.com/golangci/golangci-lint/pkg/goanalysis"
+	"github.com/uudashr/iface/duplicate"
+	"github.com/uudashr/iface/empty"
+	"github.com/uudashr/iface/opaque"
+	"github.com/uudashr/iface/unused"
+	"golang.org/x/tools/go/analysis"
+)
+
+var allAnalyzers = []*analysis.Analyzer{
+	unused.Analyzer,
+	empty.Analyzer,
+	duplicate.Analyzer,
+	opaque.Analyzer,
+}
+
+func New(settings *config.IfaceSettings) *goanalysis.Linter {
+	var conf map[string]map[string]any
+
+	analyzers := analyzersFromSettings(settings)
+
+	return goanalysis.NewLinter(
+		"iface",
+		"Detect the incorrect use of interfaces, helping developers avoid interface pollution.",
+		analyzers,
+		conf,
+	).WithLoadMode(goanalysis.LoadModeTypesInfo)
+}
+
+func analyzersFromSettings(settings *config.IfaceSettings) []*analysis.Analyzer {
+	if settings == nil || len(settings.Enable) == 0 {
+		return allAnalyzers
+	}
+
+	enabledNames := uniqueNames(settings.Enable)
+
+	var analyzers []*analysis.Analyzer
+
+	for _, a := range allAnalyzers {
+		found := slices.ContainsFunc(enabledNames, func(name string) bool {
+			return name == a.Name
+		})
+
+		if !found {
+			continue
+		}
+
+		analyzers = append(analyzers, a)
+	}
+
+	return analyzers
+}
+
+func uniqueNames(names []string) []string {
+	if len(names) == 0 {
+		return nil
+	}
+
+	namesMap := map[string]struct{}{}
+	for _, name := range names {
+		namesMap[name] = struct{}{}
+	}
+
+	uniqueNames := make([]string, 0, len(namesMap))
+
+	for name := range namesMap {
+		uniqueNames = append(uniqueNames, name)
+	}
+	return uniqueNames
+}
diff --git a/pkg/golinters/iface/iface_integration_test.go b/pkg/golinters/iface/iface_integration_test.go
new file mode 100644
index 00000000..01d587c8
--- /dev/null
+++ b/pkg/golinters/iface/iface_integration_test.go
@@ -0,0 +1,11 @@
+package iface
+
+import (
+	"testing"
+
+	"github.com/golangci/golangci-lint/test/testshared/integration"
+)
+
+func TestFromTestdata(t *testing.T) {
+	integration.RunTestdata(t)
+}
diff --git a/pkg/golinters/iface/iface_test.go b/pkg/golinters/iface/iface_test.go
new file mode 100644
index 00000000..9a6d4432
--- /dev/null
+++ b/pkg/golinters/iface/iface_test.go
@@ -0,0 +1,61 @@
+package iface
+
+import (
+	"testing"
+
+	"github.com/golangci/golangci-lint/pkg/config"
+)
+
+func TestAnalyzersFromSettings(t *testing.T) {
+	testCases := map[string]struct {
+		enable          []string
+		expectedEnabled []string
+	}{
+		"nil analyzers": {
+			enable:          nil,
+			expectedEnabled: []string{"unused", "empty", "duplicate", "opaque"},
+		},
+		"empty analyzers": {
+			enable:          []string{},
+			expectedEnabled: []string{"unused", "empty", "duplicate", "opaque"},
+		},
+		"unused only": {
+			enable:          []string{"unused"},
+			expectedEnabled: []string{"unused"},
+		},
+		"some analyzers": {
+			enable:          []string{"unused", "opaque"},
+			expectedEnabled: []string{"unused", "opaque"},
+		},
+		"duplicate analyzers": {
+			enable:          []string{"unused", "opaque", "unused"},
+			expectedEnabled: []string{"unused", "opaque"},
+		},
+		"all analyzers": {
+			enable:          []string{"unused", "opaque", "empty", "duplicate"},
+			expectedEnabled: []string{"unused", "empty", "duplicate", "opaque"},
+		},
+	}
+
+	for name, tc := range testCases {
+		t.Run(name, func(t *testing.T) {
+			settings := &config.IfaceSettings{Enable: tc.enable}
+			analyzers := analyzersFromSettings(settings)
+
+			if len(analyzers) != len(tc.expectedEnabled) {
+				t.Errorf("expected %d analyzers, got %d", len(tc.enable), len(analyzers))
+			}
+
+		LoopSettings:
+			for _, a := range analyzers {
+				for _, name := range tc.expectedEnabled {
+					if a.Name == name {
+						continue LoopSettings
+					}
+				}
+
+				t.Errorf("unexpected analyzer %q", a.Name)
+			}
+		})
+	}
+}
diff --git a/pkg/golinters/iface/testdata/duplicate.go b/pkg/golinters/iface/testdata/duplicate.go
new file mode 100644
index 00000000..4a24804b
--- /dev/null
+++ b/pkg/golinters/iface/testdata/duplicate.go
@@ -0,0 +1,11 @@
+//golangcitest:args -Eiface
+//golangcitest:config_path testdata/duplicate.yml
+package testdata
+
+type Pinger interface { // want "interface Pinger contains duplicate methods or type constraints from another interface, causing redundancy"
+	Ping() error
+}
+
+type Healthcheck interface { // want "interface Healthcheck contains duplicate methods or type constraints from another interface, causing redundancy"
+	Ping() error
+}
diff --git a/pkg/golinters/iface/testdata/duplicate.yml b/pkg/golinters/iface/testdata/duplicate.yml
new file mode 100644
index 00000000..1ac2f360
--- /dev/null
+++ b/pkg/golinters/iface/testdata/duplicate.yml
@@ -0,0 +1,4 @@
+linters-settings:
+  iface:
+    enable:
+      - duplicate
diff --git a/pkg/golinters/iface/testdata/empty.go b/pkg/golinters/iface/testdata/empty.go
new file mode 100644
index 00000000..50ebb24d
--- /dev/null
+++ b/pkg/golinters/iface/testdata/empty.go
@@ -0,0 +1,6 @@
+//golangcitest:args -Eiface
+//golangcitest:config_path testdata/empty.yml
+package testdata
+
+type Entity interface { // want "interface Entity is empty, providing no meaningful behavior"
+}
diff --git a/pkg/golinters/iface/testdata/empty.yml b/pkg/golinters/iface/testdata/empty.yml
new file mode 100644
index 00000000..7837406a
--- /dev/null
+++ b/pkg/golinters/iface/testdata/empty.yml
@@ -0,0 +1,4 @@
+linters-settings:
+  iface:
+    enable:
+      - empty
diff --git a/pkg/golinters/iface/testdata/opaque.go b/pkg/golinters/iface/testdata/opaque.go
new file mode 100644
index 00000000..de401dd8
--- /dev/null
+++ b/pkg/golinters/iface/testdata/opaque.go
@@ -0,0 +1,19 @@
+//golangcitest:args -Eiface
+//golangcitest:config_path testdata/opaque.yml
+package testdata
+
+type Server interface {
+	Serve() error
+}
+
+type server struct {
+	addr string
+}
+
+func (s server) Serve() error {
+	return nil
+}
+
+func NewServer(addr string) Server { // want "NewServer function return Server interface at the 1st result, abstract a single concrete implementation of \\*server"
+	return &server{addr: addr}
+}
diff --git a/pkg/golinters/iface/testdata/opaque.yml b/pkg/golinters/iface/testdata/opaque.yml
new file mode 100644
index 00000000..71bd7047
--- /dev/null
+++ b/pkg/golinters/iface/testdata/opaque.yml
@@ -0,0 +1,4 @@
+linters-settings:
+  iface:
+    enable:
+      - opaque
diff --git a/pkg/golinters/iface/testdata/unused.go b/pkg/golinters/iface/testdata/unused.go
new file mode 100644
index 00000000..69cc117c
--- /dev/null
+++ b/pkg/golinters/iface/testdata/unused.go
@@ -0,0 +1,35 @@
+//golangcitest:args -Eiface
+//golangcitest:config_path testdata/unused.yml
+package testdata
+
+type User struct {
+	ID   string
+	Name string
+}
+
+type UserRepository interface { // want "interface UserRepository is declared but not used within the package"
+	UserOf(id string) (*User, error)
+}
+
+type UserRepositorySQL struct {
+}
+
+func (r *UserRepositorySQL) UserOf(id string) (*User, error) {
+	return nil, nil
+}
+
+type Granter interface {
+	Grant(permission string) error
+}
+
+func AllowAll(g Granter) error {
+	return g.Grant("all")
+}
+
+type Allower interface {
+	Allow(permission string) error
+}
+
+func Allow(x interface{}) {
+	_ = x.(Allower)
+}
diff --git a/pkg/golinters/iface/testdata/unused.yml b/pkg/golinters/iface/testdata/unused.yml
new file mode 100644
index 00000000..a0511b3d
--- /dev/null
+++ b/pkg/golinters/iface/testdata/unused.yml
@@ -0,0 +1,4 @@
+linters-settings:
+  iface:
+    enable:
+      - unused
diff --git a/pkg/lint/lintersdb/builder_linter.go b/pkg/lint/lintersdb/builder_linter.go
index 7b83a815..893e2bdb 100644
--- a/pkg/lint/lintersdb/builder_linter.go
+++ b/pkg/lint/lintersdb/builder_linter.go
@@ -55,6 +55,7 @@ import (
 	"github.com/golangci/golangci-lint/pkg/golinters/gosmopolitan"
 	"github.com/golangci/golangci-lint/pkg/golinters/govet"
 	"github.com/golangci/golangci-lint/pkg/golinters/grouper"
+	"github.com/golangci/golangci-lint/pkg/golinters/iface"
 	"github.com/golangci/golangci-lint/pkg/golinters/importas"
 	"github.com/golangci/golangci-lint/pkg/golinters/inamedparam"
 	"github.com/golangci/golangci-lint/pkg/golinters/ineffassign"
@@ -470,6 +471,12 @@ func (LinterBuilder) Build(cfg *config.Config) ([]*linter.Config, error) {
 			WithPresets(linter.PresetStyle).
 			WithURL("https://github.com/leonklingele/grouper"),
 
+		linter.NewConfig(iface.New(&cfg.LintersSettings.Iface)).
+			WithSince("v1.60.0").
+			WithLoadForGoAnalysis().
+			WithPresets(linter.PresetStyle, linter.PresetMetaLinter).
+			WithURL("http://github.com/uudashr/iface"),
+
 		linter.NewConfig(linter.NewNoopDeprecated("ifshort", cfg, linter.DeprecationError)).
 			WithSince("v1.36.0").
 			WithPresets(linter.PresetStyle).
